import { NextResponse } from "next/server"
import { prisma } from "@/lib/prisma"
import { sendEmail } from "@/lib/gmail"
import { z } from "zod"
import { getFollowUpDate } from "@/lib/utils"
import { addToQueue } from "@/lib/redis"
import { parseEmailContent } from "@/lib/email-parser"
import { pipedriveService } from "@/lib/pipedrive"

const createEmailSchema = z.object({
  clientId: z.string(),
  subject: z.string(),
  content: z.string(),
})

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url)
    const status = searchParams.get("status")

    const emails = await prisma.email.findMany({
      where: status ? { status: status as any } : undefined,
      include: {
        client: true,
      },
      orderBy: {
        createdAt: "desc",
      },
    })

    return NextResponse.json(emails)
  } catch (error) {
    console.error("Error fetching emails:", error)
    return NextResponse.json(
      { error: "Failed to fetch emails" },
      { status: 500 }
    )
  }
}

export async function POST(request: Request) {
  try {
    const { recipient, subject, content } = await request.json()

    // Parse email content to extract client information
    const parsedData = await parseEmailContent(content)

    // Find or create client
    let client = await prisma.client.findUnique({
      where: { email: recipient },
    })

    if (!client) {
      client = await prisma.client.create({
        data: {
          email: recipient,
          name: parsedData.leadName || recipient.split("@")[0],
          company: parsedData.companyName,
          proposedSolution: parsedData.proposedSolution,
          proposalLink: parsedData.proposalLink,
          status: "NEW",
          lastContactDate: new Date(),
        },
      })
    } else {
      // Update client with new information if available
      client = await prisma.client.update({
        where: { id: client.id },
        data: {
          name: parsedData.leadName || client.name,
          company: parsedData.companyName || client.company,
          proposedSolution: parsedData.proposedSolution || client.proposedSolution,
          proposalLink: parsedData.proposalLink || client.proposalLink,
          lastContactDate: new Date(),
        },
      })
    }

    // Sync client with Pipedrive
    const pipedriveData = await pipedriveService.syncClient(client)

    // Update client with Pipedrive IDs
    client = await prisma.client.update({
      where: { id: client.id },
      data: {
        pipedriveId: pipedriveData.pipedriveOrgId,
        pipedriveOrgId: pipedriveData.pipedriveOrgId,
        pipedrivePersonId: pipedriveData.pipedrivePersonId,
        pipedriveDealId: pipedriveData.pipedriveDealId,
      },
    })

    // Create email record
    const email = await prisma.email.create({
      data: {
        recipient,
        subject,
        content,
        status: "DRAFT",
        clientId: client.id,
      },
    })

    // Schedule follow-up
    const followUpDate = getFollowUpDate(new Date())
    const followUp = await prisma.followUp.create({
      data: {
        emailId: email.id,
        clientId: client.id,
        content: "", // Will be generated by AI later
        status: "PENDING",
        scheduledFor: followUpDate,
      },
    })

    // Add to queue for processing
    await addToQueue({
      type: "follow-up",
      data: { followUpId: followUp.id },
    })

    return NextResponse.json({ email, client, followUp })
  } catch (error) {
    console.error("Failed to process email:", error)
    return NextResponse.json(
      { error: "Failed to process email" },
      { status: 500 }
    )
  }
}

export async function DELETE(req: Request) {
  try {
    const { searchParams } = new URL(req.url)
    const id = searchParams.get("id")

    if (!id) {
      return NextResponse.json(
        { error: "Email ID is required" },
        { status: 400 }
      )
    }

    await prisma.email.delete({
      where: { id },
    })

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error("Error deleting email:", error)
    return NextResponse.json(
      { error: "Failed to delete email" },
      { status: 500 }
    )
  }
}

export async function PATCH(req: Request) {
  try {
    const { searchParams } = new URL(req.url)
    const id = searchParams.get("id")

    if (!id) {
      return NextResponse.json(
        { error: "Email ID is required" },
        { status: 400 }
      )
    }

    const body = await req.json()
    const { content } = z.object({ content: z.string() }).parse(body)

    const email = await prisma.email.update({
      where: { id },
      data: { content },
      include: {
        client: true,
      },
    })

    return NextResponse.json(email)
  } catch (error) {
    console.error("Error updating email:", error)
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Invalid request data" },
        { status: 400 }
      )
    }
    return NextResponse.json(
      { error: "Failed to update email" },
      { status: 500 }
    )
  }
} 