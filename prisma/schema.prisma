// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmailStatus {
  DRAFT
  SENT
  FAILED
}

enum FollowUpStatus {
  PENDING
  SENT
  CANCELLED
  FAILED
}

enum ClientStatus {
  NEW
  CONTACTED
  PROPOSAL_SENT
  NEGOTIATING
  CLOSED
  LOST
}

model Email {
  id            String    @id @default(cuid())
  subject       String
  content       String
  status        EmailStatus @default(DRAFT)
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id])
  sentAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  followUps     FollowUp[]
  drafts        Draft[]
}

model Client {
  id                String    @id @default(cuid())
  companyName       String
  leadName          String
  email             String    @unique
  lastContactDate   DateTime
  nextFollowUp      DateTime?
  proposalLink      String?
  proposedSolution  String?
  status            String
  pipedriveId       String?
  pipedriveOrgId    String?
  pipedrivePersonId String?
  pipedriveDealId   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  emails            Email[]
  followUps         FollowUp[]
}

model Draft {
  id        String   @id @default(cuid())
  emailId   String
  email     Email    @relation(fields: [emailId], references: [id])
  content   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Analytics {
  id            String   @id @default(cuid())
  type          String   // emails_sent, replies_received, follow_ups_needed
  value         Int
  date          DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FollowUp {
  id            String    @id @default(cuid())
  emailId       String
  email         Email     @relation(fields: [emailId], references: [id])
  clientId      String
  client        Client    @relation(fields: [clientId], references: [id])
  status        FollowUpStatus @default(PENDING)
  scheduledFor  DateTime
  content       String?
  sentAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
} 